<template>


    <div class="container-sm">
        <div v-if="( chatAction.updatePost && chat != undefined )">
            here the update tools:
            <updateTools /> <!-- vue components tools update -->
        </div>
        <div v-if="chatAction.createPost">
            here the create tools:
            <createTools /> <!-- vue components tools create -->
        </div>

        <div class="form-floating mt-3">


            <textAreaAutosize v-model="message.content" @change="changeTextArea" />
            <br>
            var message from chatpage : {{message}}

        </div>
        <div v-if="chatAction.createPost">
            here the create actions:
            <createAction /> <!-- vue components action create -->
        </div>
        <div v-if="( chatAction.updatePost && chat != undefined )">
            here the update actions:
            <updateAction /> <!-- vue components action update -->
        </div>



    </div>

    <!-- <ThreadPage></ThreadPage> -->
    <router-view />

</template>
  
<script >

import ThreadPage from './ThreadPage.vue';
const Query = require('@/components/genericQuery');
import textAreaAutosize from '@/components/TextAreaAutosize.vue';
import CreateAction from '@/components/forms/createActions.vue';
import updateAction from '@/components/forms/createActions.vue';
import createTools from '@/components/forms/createTools.vue';
import updateTools from '@/components/forms/updateTools.vue';


export default {
    data() {
        return {
            chatAction: {
                updatePost: false,
                createPost: false,
                
            },
            chat: {},
            user: {},
            message: {
                content:'default value for message.content',
                change:'false',
            },
            
                 

        }
    },
    
    components: {
        ThreadPage,
        textAreaAutosize,
        CreateAction,
        updateAction,
        createTools,
        updateTools,
    },
    watch:
    
    mounted() {

        //console.log('hook : mounted');
        const obj = {};
        const routeToBack = '/chat/ini';
        const Method = 'post';

        const response = Query.postQuery(obj, routeToBack, Method, this.$store);
        if (response.status == 200) {
            this.chat = response.data;
            Object.assign(this.chatSelect, this.chat);
        } else if (response.status != 200 && response.status != undefined ) {
            console.log(response.status);
        }
        else {
            if (response.status == undefined) {
                console.log('no entries');
            } else {
                console.log(response);
            }

        }




    },

    methods: {
        changeTextArea(){
            console.log('changeTextArea:'  + this.message.content + ' | ' + this.message.change);

               // message.change = true;
                this.chatAction.createPost = true;
                
                                
            },
        
        
        


    },
}


</script>
  
<style scoped>
</style>